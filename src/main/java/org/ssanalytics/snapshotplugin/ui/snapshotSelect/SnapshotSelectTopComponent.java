/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ssanalytics.snapshotplugin.ui.snapshotSelect;

import com.mongodb.MongoException;
import java.awt.BorderLayout;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.UnknownHostException;
import java.sql.SQLException;
import java.util.MissingResourceException;
import javax.swing.JLabel;
import javax.swing.UIManager;
import org.gephi.ui.utils.UIUtils;
import org.json.simple.parser.ParseException;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.ssanalytics.snapshotplugin.config.dynamicConfig.ConfigurationFileManager;
import org.ssanalytics.snapshotplugin.io.dbConnection.dao.contract.NoSnapshotsException;
import org.ssanalytics.snapshotplugin.io.dbConnection.dao.factory.DaoFactory;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.ssanalytics.snapshotplugin.ui.snapshotSelect//SnapshotSelect//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "SnapshotSelectTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "filtersmode", openAtStartup = false, roles = {"overview"})
@ActionID(category = "Window", id = "org.ssanalytics.snapshotplugin.ui.snapshotSelect.SnapshotSelectTopComponent")
@ActionReference(path = "Menu/Plugins/Snapshot Plugin", position = 300)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_SnapshotSelectAction",
        preferredID = "SnapshotSelectTopComponent")
public final class SnapshotSelectTopComponent extends TopComponent {

    private SnapshotSelectPanel snapshotPanel;
    private JLabel errorLabel;

    public SnapshotSelectTopComponent() {
        try {
            initComponents();
            setName(NbBundle.getMessage(SnapshotSelectTopComponent.class, "CTL_SnapshotSelectTopComponent"));
//        setToolTipText(NbBundle.getMessage(SnapshotSelectTopComponent.class, "HINT_SnapshotSelectTopComponent"));
            putClientProperty(TopComponent.PROP_DRAGGING_DISABLED, Boolean.TRUE);
            putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);

            if (UIUtils.isAquaLookAndFeel()) {
                mainPanel.setBackground(UIManager.getColor("NbExplorerView.background"));
            }
            if (ConfigurationFileManager.getCurrentConfig() != null) {
                if (DaoFactory.testCurrentConnection()) {
                    snapshotPanel = new SnapshotSelectPanel();
                    mainPanel.add(snapshotPanel, BorderLayout.CENTER);
                }
            } else {
                throw new FileNotFoundException("Configuration File not found!");
            }
        } catch (MissingResourceException | ClassNotFoundException | SQLException | NoSnapshotsException | UnknownHostException | MongoException ex) {
//            mainPanel.add(new JLabel(ex.getMessage()), BorderLayout.NORTH);
            errorLabel = new JLabel("Please check your database configuration");
            mainPanel.add(errorLabel, BorderLayout.CENTER);
        } catch (IOException | ParseException ex) {
//            mainPanel.add(new JLabel(ex.getMessage()), BorderLayout.NORTH);
            mainPanel.add(new JLabel(ex.getMessage()), BorderLayout.CENTER);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        mainPanel.setLayout(new java.awt.BorderLayout());
        add(mainPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mainPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        if (snapshotPanel == null) {
            try {
                if (ConfigurationFileManager.getCurrentConfig() != null) {
                    if (DaoFactory.testCurrentConnection()) {
                        snapshotPanel = new SnapshotSelectPanel();
                        mainPanel.add(snapshotPanel, BorderLayout.CENTER);
                    }
                } else {
                    throw new FileNotFoundException("Configuration File not found!");
                }
            } catch (MissingResourceException | ClassNotFoundException | SQLException | NoSnapshotsException | UnknownHostException | MongoException ex) {
//            mainPanel.add(new JLabel(ex.getMessage()), BorderLayout.NORTH);
                errorLabel = new JLabel("Please check your database configuration");
                mainPanel.add(errorLabel, BorderLayout.CENTER);
            } catch (IOException | ParseException ex) {
//            mainPanel.add(new JLabel(ex.getMessage()), BorderLayout.NORTH);
                mainPanel.add(new JLabel(ex.getMessage()), BorderLayout.CENTER);
            }
        }
    }

    @Override
    public void componentClosed() {
        if (snapshotPanel != null) {
            mainPanel.remove(snapshotPanel);
            snapshotPanel = null;
        } else {
            mainPanel.remove(errorLabel);
        }
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
