/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ssanalytics.snapshotplugin.ui.snapshotSelect;

import java.io.File;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import org.gephi.data.attributes.api.AttributeModel;
import org.gephi.io.generator.api.GeneratorController;
import org.gephi.project.api.ProjectController;
import org.gephi.ranking.api.RankingController;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.ssanalytics.snapshotplugin.io.dbConnection.dao.factory.DaoFactory;
import org.ssanalytics.snapshotplugin.domainModel.crawlerData.contract.snapshotInfo.ISnapshotInfo;
import org.ssanalytics.snapshotplugin.io.dbConnection.timeflow.TimeflowMessageExporter;
import org.ssanalytics.snapshotplugin.io.generator.AbstractGenerator;
import org.ssanalytics.snapshotplugin.io.generator.general.AbstractGeneralGenerator;
import org.ssanalytics.snapshotplugin.io.generator.snapshot.AbstractSnapshotGenerator;
import org.ssanalytics.snapshotplugin.ui.helper.ComboItemGenerator;
import org.ssanalytics.snapshotplugin.ui.helper.layout.AbstractSnapshotLayoutController;
import org.ssanalytics.snapshotplugin.ui.helper.model.SnapshotGeneratorComboBoxModel;
import org.ssanalytics.snapshotplugin.ui.helper.ranking.AbstractSnapshotRankingController;

/**
 *
 * @author christian
 */
public class SnapshotSelectPanel extends javax.swing.JPanel {

    private GeneratorController genController;
    private ProjectController projectController;
    private RankingController rankingController;
    private AttributeModel attributeModel;

    /**
     * Creates new form SnapshotSelectPanel
     */
    public SnapshotSelectPanel() {
        genController = Lookup.getDefault().lookup(GeneratorController.class);
        projectController = Lookup.getDefault().lookup(ProjectController.class);
        rankingController = Lookup.getDefault().lookup(RankingController.class);
        attributeModel = Lookup.getDefault().lookup(AttributeModel.class);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listSnapshots = new javax.swing.JList();
        lblVisualization = new javax.swing.JLabel();
        cbGen = new javax.swing.JComboBox();
        btnGen = new javax.swing.JButton();
        btnRanking = new javax.swing.JButton();
        btnLayout = new javax.swing.JButton();
        timelinePanel = new javax.swing.JPanel();
        cbTimeflowExport = new javax.swing.JComboBox();
        btnExport = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(SnapshotSelectPanel.class, "SnapshotSelectPanel.jPanel1.border.title"))); // NOI18N

        listSnapshots.setModel(getSnapshotListModel());
        jScrollPane1.setViewportView(listSnapshots);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 297, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(lblVisualization, org.openide.util.NbBundle.getMessage(SnapshotSelectPanel.class, "SnapshotSelectPanel.lblVisualization.text")); // NOI18N

        cbGen.setModel(new SnapshotGeneratorComboBoxModel());
        cbGen.setSelectedIndex(0);

        org.openide.awt.Mnemonics.setLocalizedText(btnGen, org.openide.util.NbBundle.getMessage(SnapshotSelectPanel.class, "SnapshotSelectPanel.btnGen.text")); // NOI18N
        btnGen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnRanking, org.openide.util.NbBundle.getMessage(SnapshotSelectPanel.class, "SnapshotSelectPanel.btnRanking.text")); // NOI18N
        btnRanking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRankingActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnLayout, org.openide.util.NbBundle.getMessage(SnapshotSelectPanel.class, "SnapshotSelectPanel.btnLayout.text")); // NOI18N
        btnLayout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLayoutActionPerformed(evt);
            }
        });

        timelinePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(SnapshotSelectPanel.class, "SnapshotSelectPanel.timelinePanel.border.title"))); // NOI18N

        cbTimeflowExport.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Messages (In- & Outbox)" }));

        org.openide.awt.Mnemonics.setLocalizedText(btnExport, org.openide.util.NbBundle.getMessage(SnapshotSelectPanel.class, "SnapshotSelectPanel.btnExport.text")); // NOI18N
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout timelinePanelLayout = new javax.swing.GroupLayout(timelinePanel);
        timelinePanel.setLayout(timelinePanelLayout);
        timelinePanelLayout.setHorizontalGroup(
            timelinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(timelinePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbTimeflowExport, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExport))
        );
        timelinePanelLayout.setVerticalGroup(
            timelinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(timelinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(cbTimeflowExport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnExport))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(timelinePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblVisualization)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbGen, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addComponent(btnGen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRanking, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLayout, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbGen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblVisualization))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRanking)
                    .addComponent(btnLayout)
                    .addComponent(btnGen))
                .addGap(4, 4, 4)
                .addComponent(timelinePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnGenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenActionPerformed
        if (((ComboItemGenerator) cbGen.getSelectedItem()).getGenerator() instanceof AbstractSnapshotGenerator) {
            AbstractSnapshotGenerator gen = (AbstractSnapshotGenerator) ((ComboItemGenerator) cbGen.getSelectedItem()).getGenerator();
            gen.setSnapshot((ISnapshotInfo) listSnapshots.getSelectedValue());
        }
        if (((ComboItemGenerator) cbGen.getSelectedItem()).getGenerator() instanceof AbstractGeneralGenerator) {
            AbstractGeneralGenerator gen = (AbstractGeneralGenerator) ((ComboItemGenerator) cbGen.getSelectedItem()).getGenerator();
            gen.setSnapshot((ISnapshotInfo) listSnapshots.getSelectedValue());
            gen.setProfileList(null);
        }
        if (projectController.getCurrentProject() == null) {
            projectController.newProject();
        }

        genController.generate(((ComboItemGenerator) cbGen.getSelectedItem()).getGenerator());
    }//GEN-LAST:event_btnGenActionPerformed

    private void btnRankingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRankingActionPerformed
        AbstractSnapshotRankingController snapshotRankingController = ((AbstractGenerator) ((ComboItemGenerator) cbGen.getSelectedItem()).getGenerator()).getGeneratorRanking();
        snapshotRankingController.transform();
    }//GEN-LAST:event_btnRankingActionPerformed

    private void btnLayoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLayoutActionPerformed
        AbstractSnapshotLayoutController snapshotLayoutController = ((AbstractGenerator) ((ComboItemGenerator) cbGen.getSelectedItem()).getGenerator()).getGeneratorLayout();
        snapshotLayoutController.execute();
    }//GEN-LAST:event_btnLayoutActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);

        if (listSnapshots.getSelectedIndex() >= 0) {
            if (cbTimeflowExport.getSelectedItem().toString().equals("Messages (In- & Outbox)")) {
                chooser.setSelectedFile(new File("messages.timeline"));
                int returnVal = chooser.showSaveDialog(this);

                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    try {
                        String file = chooser.getSelectedFile().toString();
                        String snapshot = ((ISnapshotInfo) listSnapshots.getSelectedValue()).getValue();
                        TimeflowMessageExporter.getInstance().exportMessageTimelineForRootAccountOfSnapshotLatestVersion(file, snapshot);
                        JOptionPane.showMessageDialog(btnExport, "Timeflow data file generated successfully");
                    } catch (Exception ex) {
                        Exceptions.printStackTrace(ex);
                    }
                }
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "Please select a snapshot to perform this task", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnExportActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnGen;
    private javax.swing.JButton btnLayout;
    private javax.swing.JButton btnRanking;
    private javax.swing.JComboBox cbGen;
    private javax.swing.JComboBox cbTimeflowExport;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblVisualization;
    private javax.swing.JList listSnapshots;
    private javax.swing.JPanel timelinePanel;
    // End of variables declaration//GEN-END:variables

    // this method will be triggered when the user changes the database connection
    private void onDbUpdate() {
        listSnapshots.setModel(getSnapshotListModel());
    }

    private ListModel<ISnapshotInfo> getSnapshotListModel() {
        try {
            DefaultListModel<ISnapshotInfo> defaultListModel = new DefaultListModel<>();

            for (ISnapshotInfo info : DaoFactory.getSnapshotInfoDAO().getSnapshotInfoList()) {
                defaultListModel.addElement(info);
            }
            return defaultListModel;
        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
            return null;
        }
    }
}
