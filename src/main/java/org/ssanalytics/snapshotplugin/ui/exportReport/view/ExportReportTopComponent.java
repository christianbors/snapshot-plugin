/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ssanalytics.snapshotplugin.ui.exportReport.view;

import java.awt.BorderLayout;
import java.awt.GridBagConstraints;
import java.io.File;
import java.io.IOException;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.ssanalytics.snapshotplugin.domainModel.crawlerData.contract.profile.IProfile;
import org.ssanalytics.snapshotplugin.domainModel.crawlerData.contract.snapshotInfo.ISnapshotInfo;
import org.ssanalytics.snapshotplugin.io.dbConnection.dao.factory.DaoFactory;
import org.ssanalytics.snapshotplugin.io.exportReport.spi.ReportExportController;
import org.ssanalytics.snapshotplugin.io.exportReport.spi.ReportExporterBuilder;
import org.ssanalytics.snapshotplugin.ui.jsonSnapshotInsert.SnapshotInsertPanel;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.ssanalytics.snapshotplugin.ui.export.pdfExport//ExportReport//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "ExportReportTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false, roles = {"overview"})
@ActionID(category = "Window", id = "org.ssanalytics.snapshotplugin.ui.exportReport.view.ExportReportTopComponent")
@ActionReference(path = "Menu/Plugins/Snapshot Plugin", position = 1000)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ExportReportTopComponent",
        preferredID = "ExportReportTopComponent")
public final class ExportReportTopComponent extends TopComponent {

    ExportPanel exPanel;

    public ExportReportTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(ExportReportTopComponent.class, "CTL_ExportReportTopComponent"));
        setToolTipText(NbBundle.getMessage(ExportReportTopComponent.class, "HINT_ExportReportTopComponent"));

        exPanel = new ExportPanel();
        panelComponents.add(exPanel, BorderLayout.CENTER);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        toolbar = new javax.swing.JToolBar();
        btnRefresh = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jLabel2 = new javax.swing.JLabel();
        cbSnapshot = new javax.swing.JComboBox();
        btnSettings = new javax.swing.JButton();
        panelComponents = new javax.swing.JPanel();
        toolbarGenerate = new javax.swing.JToolBar();
        cbReportExporter = new javax.swing.JComboBox();
        btnGenerate = new javax.swing.JButton();

        setName("Form"); // NOI18N
        setLayout(new java.awt.GridBagLayout());

        toolbar.setFloatable(false);
        toolbar.setRollover(true);
        toolbar.setMaximumSize(new java.awt.Dimension(47, 23));
        toolbar.setMinimumSize(new java.awt.Dimension(47, 23));
        toolbar.setName("toolbar"); // NOI18N
        toolbar.setPreferredSize(new java.awt.Dimension(47, 23));

        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/ssanalytics/snapshotplugin/ui/exportReport/view/refresh.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnRefresh, org.openide.util.NbBundle.getMessage(ExportReportTopComponent.class, "ExportReportTopComponent.btnRefresh.text")); // NOI18N
        btnRefresh.setFocusable(false);
        btnRefresh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRefresh.setName("btnRefresh"); // NOI18N
        btnRefresh.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        toolbar.add(btnRefresh);

        jSeparator2.setName("jSeparator2"); // NOI18N
        toolbar.add(jSeparator2);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ExportReportTopComponent.class, "ExportReportTopComponent.jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        toolbar.add(jLabel2);

        cbSnapshot.setModel((ComboBoxModel) getSnapshotListModel());
        cbSnapshot.setName("cbSnapshot"); // NOI18N
        cbSnapshot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSnapshotActionPerformed(evt);
            }
        });
        toolbar.add(cbSnapshot);

        org.openide.awt.Mnemonics.setLocalizedText(btnSettings, org.openide.util.NbBundle.getMessage(ExportReportTopComponent.class, "ExportReportTopComponent.btnSettings.text")); // NOI18N
        btnSettings.setFocusable(false);
        btnSettings.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSettings.setName("btnSettings"); // NOI18N
        btnSettings.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolbar.add(btnSettings);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        add(toolbar, gridBagConstraints);

        panelComponents.setName("panelExport"); // NOI18N
        panelComponents.setLayout(new java.awt.BorderLayout());

        toolbarGenerate.setFloatable(false);
        toolbarGenerate.setRollover(true);
        toolbarGenerate.setName("toolbarGenerate"); // NOI18N

        cbReportExporter.setModel(getCreators());
        cbReportExporter.setName("cbReportExporter"); // NOI18N
        toolbarGenerate.add(cbReportExporter);

        org.openide.awt.Mnemonics.setLocalizedText(btnGenerate, org.openide.util.NbBundle.getMessage(ExportReportTopComponent.class, "ExportReportTopComponent.btnGenerate.text")); // NOI18N
        btnGenerate.setFocusable(false);
        btnGenerate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGenerate.setName("btnGenerate"); // NOI18N
        btnGenerate.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });
        toolbarGenerate.add(btnGenerate);

        panelComponents.add(toolbarGenerate, java.awt.BorderLayout.PAGE_END);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(panelComponents, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
//        ((ReportExporterBuilder) cbReportExporter.getSelectedItem()).buildExporter();
        ReportExportController reportExportController = new ReportExportController(((ReportExporterBuilder) cbReportExporter.getSelectedItem()).buildExporter(), (ISnapshotInfo) cbSnapshot.getSelectedItem());
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(reportExportController.getExporterFileFilter());
        chooser.setSelectedFile(new File("forensicReport" + reportExportController.getExporterFileEnding()));
        if (chooser.showOpenDialog(ExportReportTopComponent.this) == JFileChooser.APPROVE_OPTION) {
            try {
                File exportDocFile;
                if (!chooser.getFileFilter().accept(chooser.getSelectedFile())) {
                    exportDocFile = new File(chooser.getSelectedFile().getCanonicalPath() + reportExportController.getExporterFileEnding());
                } else {
                    exportDocFile = chooser.getSelectedFile();
                }
                reportExportController.exportReport(exportDocFile, exPanel.retrieveContent((ISnapshotInfo) cbSnapshot.getSelectedItem()));
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
            Object[] message = {new String("File has been generated in:\n " + chooser.getSelectedFile().getAbsolutePath() + "!")};
            JOptionPane.showMessageDialog(null, message);
        }
    }//GEN-LAST:event_btnGenerateActionPerformed

    private void cbSnapshotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSnapshotActionPerformed
        exPanel = new ExportPanel((ISnapshotInfo) cbSnapshot.getSelectedItem());
        remove(panelComponents);
        initPanelComponents();
        panelComponents.add(exPanel, BorderLayout.CENTER);
        panelComponents.revalidate();
        panelComponents.repaint();
    }//GEN-LAST:event_cbSnapshotActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        remove(toolbar);
        cbSnapshot.setModel((ComboBoxModel) getSnapshotListModel());
        GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        add(toolbar, gridBagConstraints);
        toolbar.revalidate();
        toolbar.repaint();

        exPanel = new ExportPanel();
        remove(panelComponents);
        initPanelComponents();
        panelComponents.add(exPanel, BorderLayout.CENTER);
        panelComponents.revalidate();
        panelComponents.repaint();
    }//GEN-LAST:event_btnRefreshActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGenerate;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSettings;
    private javax.swing.JComboBox cbReportExporter;
    private javax.swing.JComboBox cbSnapshot;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JPanel panelComponents;
    private javax.swing.JToolBar toolbar;
    private javax.swing.JToolBar toolbarGenerate;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        remove(toolbar);
        cbSnapshot.setModel((ComboBoxModel) getSnapshotListModel());
        GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        add(toolbar, gridBagConstraints);
        toolbar.revalidate();
        toolbar.repaint();

        if (exPanel == null) {
            exPanel = new ExportPanel();
            remove(panelComponents);
            initPanelComponents();
            panelComponents.add(exPanel, BorderLayout.CENTER);
            panelComponents.revalidate();
            panelComponents.repaint();
        }
    }

    @Override
    public void componentClosed() {
        cbSnapshot = null;
        panelComponents.remove(exPanel);
        exPanel = null;
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private ComboBoxModel<ReportExporterBuilder> getCreators() {
        return new DefaultComboBoxModel<>(Lookup.getDefault().lookupAll(ReportExporterBuilder.class).toArray(new ReportExporterBuilder[0]));
    }

    private ComboBoxModel<ISnapshotInfo> getSnapshotListModel() {
        try {
            DefaultComboBoxModel<ISnapshotInfo> defaultListModel = new DefaultComboBoxModel<>();

            for (ISnapshotInfo info : DaoFactory.getSnapshotInfoDAO().getSnapshotInfoList()) {
                defaultListModel.addElement(info);
            }
            return defaultListModel;
        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
            return null;
        }
    }

    private void initPanelComponents() {
        panelComponents = new javax.swing.JPanel();
        panelComponents.setName("panelExport"); // NOI18N
        panelComponents.setLayout(new java.awt.BorderLayout());

        panelComponents.add(toolbarGenerate, java.awt.BorderLayout.PAGE_END);

        GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(panelComponents, gridBagConstraints);
    }
}
