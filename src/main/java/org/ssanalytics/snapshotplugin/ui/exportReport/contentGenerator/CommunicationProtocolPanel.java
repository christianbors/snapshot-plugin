/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ssanalytics.snapshotplugin.ui.exportReport.contentGenerator;

import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.ListModel;
import org.openide.util.Exceptions;
import org.ssanalytics.snapshotplugin.domainModel.crawlerData.contract.profile.IProfile;
import org.ssanalytics.snapshotplugin.domainModel.crawlerData.contract.snapshotInfo.ISnapshotInfo;
import org.ssanalytics.snapshotplugin.io.dbConnection.dao.factory.DaoFactory;

/**
 *
 * @author christian
 */
public class CommunicationProtocolPanel extends javax.swing.JPanel {

    private ISnapshotInfo snapshot;

    /**
     * Creates new form CommunicationProtocolPanel
     */
    public CommunicationProtocolPanel(ISnapshotInfo snapshot) {
        if (snapshot == null) {
            try {
                this.snapshot = DaoFactory.getSnapshotInfoDAO().getSnapshotInfoList().get(0);
            } catch (Exception ex) {
                Exceptions.printStackTrace(ex);
            }
        } else {
            this.snapshot = snapshot;
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        header = new org.jdesktop.swingx.JXHeader();
        panelCommTypes = new javax.swing.JPanel();
        chckbxPrivate = new javax.swing.JCheckBox();
        chckbxWall = new javax.swing.JCheckBox();

        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        header.setDescription(org.openide.util.NbBundle.getMessage(CommunicationProtocolPanel.class, "CommunicationProtocolPanel.header.description")); // NOI18N
        header.setName("header"); // NOI18N
        header.setTitle(org.openide.util.NbBundle.getMessage(CommunicationProtocolPanel.class, "CommunicationProtocolPanel.header.title")); // NOI18N
        add(header, java.awt.BorderLayout.NORTH);

        panelCommTypes.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(CommunicationProtocolPanel.class, "CommunicationProtocolPanel.panelCommTypes.border.title"))); // NOI18N
        panelCommTypes.setName("panelCommTypes"); // NOI18N
        panelCommTypes.setPreferredSize(new java.awt.Dimension(400, 100));

        org.openide.awt.Mnemonics.setLocalizedText(chckbxPrivate, org.openide.util.NbBundle.getMessage(CommunicationProtocolPanel.class, "CommunicationProtocolPanel.chckbxPrivate.text")); // NOI18N
        chckbxPrivate.setName("chckbxPrivate"); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(chckbxWall, org.openide.util.NbBundle.getMessage(CommunicationProtocolPanel.class, "CommunicationProtocolPanel.chckbxWall.text")); // NOI18N
        chckbxWall.setName("chckbxWall"); // NOI18N

        javax.swing.GroupLayout panelCommTypesLayout = new javax.swing.GroupLayout(panelCommTypes);
        panelCommTypes.setLayout(panelCommTypesLayout);
        panelCommTypesLayout.setHorizontalGroup(
            panelCommTypesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCommTypesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCommTypesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chckbxPrivate)
                    .addComponent(chckbxWall))
                .addContainerGap(247, Short.MAX_VALUE))
        );
        panelCommTypesLayout.setVerticalGroup(
            panelCommTypesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCommTypesLayout.createSequentialGroup()
                .addComponent(chckbxPrivate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chckbxWall)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(panelCommTypes, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chckbxPrivate;
    private javax.swing.JCheckBox chckbxWall;
    private org.jdesktop.swingx.JXHeader header;
    private javax.swing.JPanel panelCommTypes;
    // End of variables declaration//GEN-END:variables

    private ListModel<IProfile> getProfileListModel() {
        try {
            DefaultListModel<IProfile> defaultListModel = new DefaultListModel<>();

            for (IProfile info : DaoFactory.getProfileDAO().getProfileListForSnapshotLatestVersion(snapshot.getValue())) {
                defaultListModel.addElement(info);
            }
            return defaultListModel;
        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
            return null;
        }
    }

    public void setSnapshot(ISnapshotInfo snapshot) {
        this.snapshot = snapshot;
    }

    public boolean getChckbxPrivateSelected() {
        return chckbxPrivate.isSelected();
    }

    public boolean getChckbxWallSelected() {
        return chckbxWall.isSelected();
    }
}
