/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ssanalytics.snapshotplugin.ui.exportReport.contentGenerator;

import java.io.IOException;
import javax.swing.JFileChooser;
import org.openide.util.Exceptions;

/**
 *
 * @author Christian
 */
public class ExpandedArchiveExportPanel extends javax.swing.JPanel {

    /**
     * Creates new form ExpandedArchiveExportPanel
     */
    public ExpandedArchiveExportPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        header = new org.jdesktop.swingx.JXHeader();
        panelProperties = new javax.swing.JPanel();
        panelOpen = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tfOpen = new javax.swing.JTextField();
        btnOpen = new javax.swing.JButton();
        panelExportTypes = new javax.swing.JPanel();
        chckbxAddress = new javax.swing.JCheckBox();
        chckbxName = new javax.swing.JCheckBox();

        setLayout(new java.awt.BorderLayout());

        header.setDescription(org.openide.util.NbBundle.getMessage(ExpandedArchiveExportPanel.class, "ExpandedArchiveExportPanel.header.description")); // NOI18N
        header.setTitle(org.openide.util.NbBundle.getMessage(ExpandedArchiveExportPanel.class, "ExpandedArchiveExportPanel.header.title")); // NOI18N
        add(header, java.awt.BorderLayout.NORTH);

        panelOpen.setLayout(new javax.swing.BoxLayout(panelOpen, javax.swing.BoxLayout.LINE_AXIS));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ExpandedArchiveExportPanel.class, "ExpandedArchiveExportPanel.jLabel1.text")); // NOI18N
        panelOpen.add(jLabel1);

        tfOpen.setEditable(false);
        tfOpen.setText(org.openide.util.NbBundle.getMessage(ExpandedArchiveExportPanel.class, "ExpandedArchiveExportPanel.tfOpen.text")); // NOI18N
        panelOpen.add(tfOpen);

        org.openide.awt.Mnemonics.setLocalizedText(btnOpen, org.openide.util.NbBundle.getMessage(ExpandedArchiveExportPanel.class, "ExpandedArchiveExportPanel.btnOpen.text")); // NOI18N
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });
        panelOpen.add(btnOpen);

        panelExportTypes.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ExpandedArchiveExportPanel.class, "ExpandedArchiveExportPanel.panelExportTypes.border.title"))); // NOI18N
        panelExportTypes.setLayout(new javax.swing.BoxLayout(panelExportTypes, javax.swing.BoxLayout.LINE_AXIS));

        org.openide.awt.Mnemonics.setLocalizedText(chckbxAddress, org.openide.util.NbBundle.getMessage(ExpandedArchiveExportPanel.class, "ExpandedArchiveExportPanel.chckbxAddress.text")); // NOI18N
        panelExportTypes.add(chckbxAddress);

        org.openide.awt.Mnemonics.setLocalizedText(chckbxName, org.openide.util.NbBundle.getMessage(ExpandedArchiveExportPanel.class, "ExpandedArchiveExportPanel.chckbxName.text")); // NOI18N
        panelExportTypes.add(chckbxName);

        javax.swing.GroupLayout panelPropertiesLayout = new javax.swing.GroupLayout(panelProperties);
        panelProperties.setLayout(panelPropertiesLayout);
        panelPropertiesLayout.setHorizontalGroup(
            panelPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelOpen, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
            .addComponent(panelExportTypes, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelPropertiesLayout.setVerticalGroup(
            panelPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPropertiesLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(panelOpen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(panelExportTypes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        add(panelProperties, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (chooser.showOpenDialog(ExpandedArchiveExportPanel.this) == JFileChooser.APPROVE_OPTION) {
            try {
                tfOpen.setText(chooser.getSelectedFile().getCanonicalPath());
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }//GEN-LAST:event_btnOpenActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOpen;
    private javax.swing.JCheckBox chckbxAddress;
    private javax.swing.JCheckBox chckbxName;
    private org.jdesktop.swingx.JXHeader header;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel panelExportTypes;
    private javax.swing.JPanel panelOpen;
    private javax.swing.JPanel panelProperties;
    private javax.swing.JTextField tfOpen;
    // End of variables declaration//GEN-END:variables

    public boolean getChckbxNameSelected() {
        return chckbxName.isSelected();
    }
    
    public boolean getChckbxAddressSelected() {
        return chckbxAddress.isSelected();
    }
    
    public String getFilePath() {
        return tfOpen.getText();
    }
}
