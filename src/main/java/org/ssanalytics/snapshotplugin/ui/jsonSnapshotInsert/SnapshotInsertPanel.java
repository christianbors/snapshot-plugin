/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ssanalytics.snapshotplugin.ui.jsonSnapshotInsert;

import java.io.File;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import org.ssanalytics.snapshotplugin.config.dynamicConfig.Configuration;
import org.ssanalytics.snapshotplugin.config.dynamicConfig.ConfigurationFileManager;
import org.ssanalytics.snapshotplugin.config.dynamicConfig.DbConfiguration;
import org.ssanalytics.snapshotplugin.config.dynamicConfig.DbMode;

/**
 *
 * @author christian
 */
public class SnapshotInsertPanel extends javax.swing.JPanel {
    
    private SnapshotInsertController ic;
    
    private Configuration config;
    private DbConfiguration selectedConfig;
    
    private JFileChooser chooser;
    private File jsonFile;
    private String timestamp;
    /**
     * Creates new form SnapshotInsertPanel
     */
    public SnapshotInsertPanel() {
        config = ConfigurationFileManager.getCurrentConfig();
        
        chooser = new JFileChooser();
        chooser.setFileFilter(new JSONFilter());

        ic = new SnapshotInsertController();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnOpen = new javax.swing.JButton();
        tfFilename = new javax.swing.JTextField();
        btnImport = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cbDatabase = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfSnapshotName = new javax.swing.JTextField();
        tfTimestamp = new javax.swing.JTextField();

        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        org.openide.awt.Mnemonics.setLocalizedText(btnOpen, org.openide.util.NbBundle.getMessage(SnapshotInsertPanel.class, "SnapshotInsertPanel.btnOpen.text")); // NOI18N
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });

        tfFilename.setEditable(false);
        tfFilename.setText(org.openide.util.NbBundle.getMessage(SnapshotInsertPanel.class, "SnapshotInsertPanel.tfFilename.text")); // NOI18N
        tfFilename.setToolTipText(org.openide.util.NbBundle.getMessage(SnapshotInsertPanel.class, "SnapshotInsertPanel.tfFilename.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(btnImport, org.openide.util.NbBundle.getMessage(SnapshotInsertPanel.class, "SnapshotInsertPanel.btnImport.text")); // NOI18N
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(SnapshotInsertPanel.class, "SnapshotInsertPanel.jLabel1.text")); // NOI18N

        cbDatabase.setModel(new DefaultComboBoxModel(config.getDbConfigurations().toArray(new DbConfiguration[0])));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), org.openide.util.NbBundle.getMessage(SnapshotInsertPanel.class, "SnapshotInsertPanel.jPanel2.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(SnapshotInsertPanel.class, "SnapshotInsertPanel.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(SnapshotInsertPanel.class, "SnapshotInsertPanel.jLabel3.text")); // NOI18N

        tfSnapshotName.setText(org.openide.util.NbBundle.getMessage(SnapshotInsertPanel.class, "SnapshotInsertPanel.tfSnapshotName.text")); // NOI18N

        tfTimestamp.setEditable(false);
        tfTimestamp.setText(org.openide.util.NbBundle.getMessage(SnapshotInsertPanel.class, "SnapshotInsertPanel.tfTimestamp.text")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfTimestamp, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                    .addComponent(tfSnapshotName))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tfSnapshotName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tfTimestamp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(cbDatabase, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnImport))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tfFilename, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnOpen)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfFilename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOpen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnImport)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed

        int returnVal = chooser.showOpenDialog(SnapshotInsertPanel.this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            jsonFile = chooser.getSelectedFile();
            tfFilename.setText(jsonFile.getAbsolutePath());
            tfFilename.updateUI();
            timestamp = ic.parseTimestampFromFilename(jsonFile);
            // change timestamp value to real date
            //            Date time = new Date(Long.parseLong(timestamp));
            //            tfTimestamp.setText(time.toString());
            tfTimestamp.setText(timestamp);
        }
    }//GEN-LAST:event_btnOpenActionPerformed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        //TODO change combobox to Database Configuration
        selectedConfig = (DbConfiguration) cbDatabase.getSelectedItem();
        config.setActiveDbConfiguration(selectedConfig.getConfigurationName());
        
        try {
            long startTime = System.currentTimeMillis();
            ic.importFile(jsonFile, timestamp,
                tfSnapshotName.getText());
            long endtime = System.currentTimeMillis();
            long time_needed = endtime - startTime;
            System.out.println("Import finished in "
                + String.valueOf(time_needed + "ms"));

            float time_needed_seconds = time_needed / 1000;
            float time_needed_minutes = time_needed_seconds / 60;
            
            JOptionPane.showMessageDialog(this, "Import finished in "
                + String.valueOf(time_needed + "ms") + "\n\nThat's about "
                + String.valueOf(time_needed_minutes)
                + " minutos");
            
            System.out.println("That's exactly "
                + String.valueOf(time_needed_minutes)
                + " minutos");
        } catch (Exception e1) {
            // TODO: Show nice error message to the user.
            e1.printStackTrace();
        }
    }//GEN-LAST:event_btnImportActionPerformed

    private ComboBoxModel getCBDatabaseModel() {
        return new DefaultComboBoxModel(DbMode.values());
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnOpen;
    private javax.swing.JComboBox cbDatabase;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField tfFilename;
    private javax.swing.JTextField tfSnapshotName;
    private javax.swing.JTextField tfTimestamp;
    // End of variables declaration//GEN-END:variables

    
    class JSONFilter extends FileFilter {

        @Override
        public boolean accept(File f) {
            String filename = f.getName();

            if (f.isDirectory()) {
                return true;
            }

            return filename.endsWith(".json");
        }

        @Override
        public String getDescription() {
            return "*.json";
        }
    }
    
}
