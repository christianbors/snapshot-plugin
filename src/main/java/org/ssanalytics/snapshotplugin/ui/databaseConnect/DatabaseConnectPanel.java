/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ssanalytics.snapshotplugin.ui.databaseConnect;

import com.mongodb.MongoException;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import org.json.simple.parser.ParseException;
import org.netbeans.validation.api.Problems;
import org.netbeans.validation.api.Validator;
import org.netbeans.validation.api.builtin.Validators;
import org.netbeans.validation.api.ui.ValidationGroup;
import org.netbeans.validation.api.ui.ValidationPanel;
import org.openide.util.Exceptions;
import org.ssanalytics.snapshotplugin.config.dynamicConfig.Configuration;
import org.ssanalytics.snapshotplugin.config.dynamicConfig.DbConfiguration;
import org.ssanalytics.snapshotplugin.config.dynamicConfig.DbMode;
import org.ssanalytics.snapshotplugin.io.dbConnection.dao.contract.NoSnapshotsException;
import org.ssanalytics.snapshotplugin.io.dbConnection.dao.factory.DaoFactory;

/**
 *
 * @author christian
 */
public class DatabaseConnectPanel extends javax.swing.JPanel {

    private Configuration config;
    private List<DbConfiguration> confList;
    private DbConfiguration confActive;

    /**
     * Creates new form DatabaseConnectPanel
     */
    public DatabaseConnectPanel(Configuration config) {

        this.config = config;

        confList = config.getDbConfigurations();
        initComponents();
        //this is a hack, Objects are not the same even if they are taken from the same list
        for (DbConfiguration searchConf : confList) {
            if (searchConf.getConfigurationName().equals(this.config.getActiveDbConfiguration().getConfigurationName())) {
                confActive = searchConf;
                cbConfig.setSelectedItem(confActive);
            }
        }
    }
    static ValidationGroup group;

    public static ValidationPanel createValidationPanel(DatabaseConnectPanel innerPanel) {
        ValidationPanel validationPanel = new ValidationPanel();
        validationPanel.setInnerComponent(innerPanel);

        group = validationPanel.getValidationGroup();
        //Validators
        group.add(innerPanel.tfDbName, Validators.REQUIRE_NON_EMPTY_STRING);
        group.add(innerPanel.tfHostName, Validators.HOST_NAME_OR_IP_ADDRESS);
        group.add(innerPanel.tfDbPort, new PortValidator());
        group.add(innerPanel.tfPassword, Validators.MAY_NOT_START_WITH_DIGIT);
        return validationPanel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelSettings = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cbDatabase = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tfDbName = new javax.swing.JTextField();
        tfHostName = new javax.swing.JTextField();
        tfDbPort = new javax.swing.JTextField();
        tfUsername = new javax.swing.JTextField();
        tfPassword = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        btnConnect = new javax.swing.JButton();
        lblConfig = new javax.swing.JLabel();
        cbConfig = new javax.swing.JComboBox();
        btnNewConfig = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        panelSettings.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(DatabaseConnectPanel.class, "DatabaseConnectPanel.panelSettings.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(DatabaseConnectPanel.class, "DatabaseConnectPanel.jLabel1.text")); // NOI18N

        cbDatabase.setModel(new DefaultComboBoxModel(DbMode.values()));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(DatabaseConnectPanel.class, "DatabaseConnectPanel.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(DatabaseConnectPanel.class, "DatabaseConnectPanel.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(DatabaseConnectPanel.class, "DatabaseConnectPanel.jLabel4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(DatabaseConnectPanel.class, "DatabaseConnectPanel.jLabel5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(DatabaseConnectPanel.class, "DatabaseConnectPanel.jLabel6.text")); // NOI18N

        tfDbName.setText(org.openide.util.NbBundle.getMessage(DatabaseConnectPanel.class, "DatabaseConnectPanel.tfDbName.text")); // NOI18N

        tfHostName.setText(org.openide.util.NbBundle.getMessage(DatabaseConnectPanel.class, "DatabaseConnectPanel.tfHostName.text")); // NOI18N

        tfDbPort.setText(org.openide.util.NbBundle.getMessage(DatabaseConnectPanel.class, "DatabaseConnectPanel.tfDbPort.text")); // NOI18N

        tfUsername.setText(org.openide.util.NbBundle.getMessage(DatabaseConnectPanel.class, "DatabaseConnectPanel.tfUsername.text")); // NOI18N

        tfPassword.setText(org.openide.util.NbBundle.getMessage(DatabaseConnectPanel.class, "DatabaseConnectPanel.tfPassword.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(btnSave, org.openide.util.NbBundle.getMessage(DatabaseConnectPanel.class, "DatabaseConnectPanel.btnSave.text")); // NOI18N
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnConnect, org.openide.util.NbBundle.getMessage(DatabaseConnectPanel.class, "DatabaseConnectPanel.btnConnect.text")); // NOI18N
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSettingsLayout = new javax.swing.GroupLayout(panelSettings);
        panelSettings.setLayout(panelSettingsLayout);
        panelSettingsLayout.setHorizontalGroup(
            panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSettingsLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbDatabase, 0, 115, Short.MAX_VALUE))
                    .addGroup(panelSettingsLayout.createSequentialGroup()
                        .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfDbName)
                            .addComponent(tfHostName)
                            .addComponent(tfDbPort)
                            .addComponent(tfUsername)
                            .addComponent(tfPassword)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSettingsLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnConnect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSave)))
                .addContainerGap())
        );
        panelSettingsLayout.setVerticalGroup(
            panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tfDbName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tfHostName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfDbPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tfUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(tfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnConnect))
                .addContainerGap())
        );

        org.openide.awt.Mnemonics.setLocalizedText(lblConfig, org.openide.util.NbBundle.getMessage(DatabaseConnectPanel.class, "DatabaseConnectPanel.lblConfig.text")); // NOI18N

        cbConfig.setModel(new DefaultComboBoxModel(confList.toArray(new DbConfiguration[0])));
        cbConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbConfigActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnNewConfig, org.openide.util.NbBundle.getMessage(DatabaseConnectPanel.class, "DatabaseConnectPanel.btnNewConfig.text")); // NOI18N
        btnNewConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewConfigActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnDelete, org.openide.util.NbBundle.getMessage(DatabaseConnectPanel.class, "DatabaseConnectPanel.btnDelete.text")); // NOI18N
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(panelSettings, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(lblConfig)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbConfig, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btnNewConfig)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblConfig)
                    .addComponent(cbConfig, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNewConfig)
                    .addComponent(btnDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelSettings, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnNewConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewConfigActionPerformed
        DbConfiguration newConfig = new DbConfiguration("New Configuration", DbMode.values()[0], "", "", "1", "", "");
        confList.add(newConfig);
        confActive = newConfig;
        cbConfig.addItem(newConfig);
        cbConfig.setSelectedItem(newConfig);
    }//GEN-LAST:event_btnNewConfigActionPerformed

    private void cbConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbConfigActionPerformed
//        config.setActiveDbConfiguration(((DbConfiguration) cbConfig.getSelectedItem()).getConfigurationName());
        confActive = (DbConfiguration) cbConfig.getSelectedItem();
        populateForm();
    }//GEN-LAST:event_cbConfigActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        DbConfiguration current = confActive;
        current.setDbMode((DbMode) cbDatabase.getSelectedItem());
        current.setDbName(tfDbName.getText());
        current.setPort(tfDbPort.getText());
        current.setHost(tfHostName.getText());
        current.setPwd(tfPassword.getText());
        current.setUser(tfUsername.getText());

        //test@localhost:18966 [MongoDB]
        current.setConfigurationName(createConfigurationName(current));

//        config.setActiveDbConfiguration(current.getConfigurationName());
        config.setDbConfigurations(confList);
        cbConfig.setSelectedItem(current);

    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int idx = cbConfig.getSelectedIndex();
        //continue here
        cbConfig.removeItemAt(cbConfig.getSelectedIndex());
        if (idx > 0) {
            cbConfig.setSelectedIndex(idx - 1);
            confActive = confList.get(idx - 1);
        } else {
            cbConfig.setSelectedIndex(0);
            confActive = confList.get(0);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        try {
            if (DaoFactory.testNewConnection(confActive)) {
                Object[] message = {new String("Connection to " + confActive.getConfigurationName() + " succeeded")};
                JOptionPane.showMessageDialog(null, message, "Connection Established", JOptionPane.PLAIN_MESSAGE);
                config.setDbConfigurations(confList);
                config.setActiveDbConfiguration(confActive.getConfigurationName());
            }
        } catch (MongoException | NoSnapshotsException | IOException | SQLException mex) {
            JOptionPane.showMessageDialog(null, mex.getMessage(), "Database Connection Error", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException | ParseException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_btnConnectActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnNewConfig;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox cbConfig;
    private javax.swing.JComboBox cbDatabase;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel lblConfig;
    private javax.swing.JPanel panelSettings;
    private javax.swing.JTextField tfDbName;
    private javax.swing.JTextField tfDbPort;
    private javax.swing.JTextField tfHostName;
    private javax.swing.JTextField tfPassword;
    private javax.swing.JTextField tfUsername;
    // End of variables declaration//GEN-END:variables

    private String createConfigurationName(DbConfiguration dbConf) {
        return dbConf.getUser() + "@" + dbConf.getHost() + ":" + dbConf.getPort() + " [" + dbConf.getDbMode().toString() + "]";
    }

    private void populateForm() {;
        tfDbName.setText(confActive.getDbName());
        tfHostName.setText(confActive.getHost());
        tfDbPort.setText(confActive.getPort());
        tfUsername.setText(confActive.getUser());
        tfPassword.setText(confActive.getPwd());
        //test
        cbDatabase.setSelectedItem(confActive.getDbMode());

        if (group != null) {
            group.validateAll();
        }
    }

    private static class PortValidator implements Validator<String> {

        public PortValidator() {
        }

        @Override
        public boolean validate(Problems problems, String compName, String model) {

            return Validators.REQUIRE_NON_EMPTY_STRING.validate(problems, compName, model)
                    && Validators.REQUIRE_VALID_INTEGER.validate(problems, compName, model)
                    && Validators.numberRange(1, 65535).validate(problems, compName, model);
        }
    }
}
